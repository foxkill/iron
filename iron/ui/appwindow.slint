import { VerticalBox, Button, HorizontalBox, LineEdit, StandardTableView, GroupBox, TabWidget, ListView, StandardButton, ComboBox, GridBox } from "std-widgets.slint";
import { CusipInput } from "cusipinput.slint";
import { SecurityDisplay, SlMap } from "securitydisplay.slint";
import { AppState } from "appstate.slint";
import { DetailsTableAdapter, QualityTableAdapter, SecuritiesTableAdapter } from "tableadapters.slint";
import { Resizer } from "resizer.slint";
import { HeaderData } from "data.slint";

export { AppState, DetailsTableAdapter, SecuritiesTableAdapter, QualityTableAdapter, SlMap }

export component AppWindow inherits Window {
    out property <int> tab-index: twidget.current-index;
    callback close;

    title: "Iron - The auction result viewer";
    preferred_width: 1024px;
    preferred_height: 768px;
    VerticalLayout {
        padding: 20px;
        spacing: 20px;
        
        HorizontalLayout {
            padding: 5px;
            spacing: 5px;
            twidget := TabWidget {
                Tab {
                    title: "Detail Data";
                    VerticalBox {
                        CusipInput {
                            cusip-changed(cusip) => {
                                if AppState.validate_cusip(cusip) {
                                    AppState.set-the-cusip(cusip);
                                }
                            }
                        }

                        details-display := StandardTableView {
                            columns: HeaderData.header;
                            rows: DetailsTableAdapter.row_data;
                            // vertical-stretch: 1;
                            // horizontal-stretch: 1;
                        }
                    }
                }

                Tab {
                    title: "Securities";
                    VerticalBox {
                        combo := ComboBox {
                            model: ["1", "5", "10"];
                            current-value: "5";
                            current-index: 1;
                        }

                        securities := StandardTableView {
                            vertical-stretch: 1;
                            columns: [];
                            rows: SecuritiesTableAdapter.row_data;
                        }
                    }
                }

                Tab {
                    title: "Auction Quality";
                    vbox := VerticalLayout {
                        spacing: 5px;
                        toolbar := HorizontalLayout {
                            height: self.preferred-height;
                            padding: 5px;
                            spacing: 5px;
                            Text {
                                vertical-alignment: center;
                                text: "Auction Type:";
                            }

                            auctiontype := ComboBox {
                                model: ["2yr", "3yr", "5yr", "7yr", "10yr", "20yr", "30yr"];
                                current-value: "10yr";
                                current-index: 4;
                                init => {
                                    AppState.auction-type = self.current-value;
                                }
                                selected => {
                                    AppState.auction-type = self.current-value;
                                    barchart.changed += 1;
                                }
                            }

                            Text {
                                vertical-alignment: center;
                                text: "How many auction to look back:";
                            }

                            lookback := ComboBox {
                                model: ["2", "5", "10"];
                                current-index: 1;
                                init => {
                                    AppState.lookback = self.current-value;
                                }
                                selected => {
                                    AppState.lookback = self.current-value;
                                    barchart.changed += 1;
                                }
                            }

                            Text {
                                vertical-alignment: center;
                                text: "What to show:";
                            }

                            ComboBox {
                                model: ["Bid To Cover", "Primary Dealers", "Indirects", "Directs"];
                                current-index: 0;
                                init => {
                                    AppState.takedown = self.current-index;
                                }
                                selected => {
                                    AppState.takedown = self.current-index;
                                    barchart.changed += 1;
                                }
                            }
                        }

                        hlupper := HorizontalLayout {
                            height: 50%;
                            Rectangle {
                                border-width: 2px;
                                // border-color: red;
                                barchart := Image {
                                    property <int> changed;
                                    x: 0;
                                    y: 0;
                                    // preferred-height: 680px;
                                    width: 100%;
                                    height: 100%;
                                    source: AppState.render_plot(hlupper.width, hlupper.height, changed);
                                }
                            }
                        }

                        sp := Resizer {
                            width: 100%;
                            init => {
                                // self.vspace = hlupper.height + hllower.height;
                                self.upper_distance = self.y - hlupper.height;
                                self.lower_distance = hllower.y - self.y;
                                // debug(self.vspace, hlupper.height, hllower.height);
                            }
                            moved => {
                                if self.vspace == 0px {
                                    self.vspace = hlupper.height + hllower.height;
                                }
                                self.current-position = self.y + (self.mouse-y - self.pressed-y);
                                if (self.current-position < vbox.y + self.min-v-height) {
                                    self.y = vbox.y + self.min-v-height;
                                } else if (self.current-position > vbox.y + vbox.height + self.min-v-height) {
                                    self.y = vbox.y + vbox.height - (self.height + self.min-v-height)
                                } else {
                                    self.y = self.current-position;
                                }
                                hlupper.height = self.y - (self.upper_distance);
                                hllower.y = self.y + (self.lower_distance);
                                hllower.height = self.vspace - hlupper.height;
                            }
                        }

                        hllower := HorizontalLayout {
                            quality := StandardTableView {
                                row-pointer-event(row, event, pt) => {
                                    if (
                                        event.button == PointerEventButton.left &&
                                        event.kind == PointerEventKind.down &&
                                        event.modifiers.shift == true
                                    ) {
                                        QualityTableAdapter.copy_cusip_to_clipboard(row);
                                    }
                                }
                                columns: HeaderData.header;
                                rows: QualityTableAdapter.row_data;
                            }
                        }
                    }
                }
            }
        }

        HorizontalLayout {
            Rectangle {
                height: 2px;
                background: gray;
            }
        }

        HorizontalLayout {
            Rectangle { }

            Button {
                text: "Close";
                clicked => {
                    close();
                }
            }
        }
    }
}
